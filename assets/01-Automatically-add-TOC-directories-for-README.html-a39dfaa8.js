import{_ as t,r as o,o as c,c as i,a as e,b as n,e as a,d as l}from"./app-984a00ab.js";const r={},p=e("p",null,[n("GitHub 的 Markdown 目前不支持直接"),e("code",null,"[TOC]"),n("渲染文章的目录，有些 README 则需要这样的效果，可以借助外部工具进行生成，也可以借助  "),e("code",null,"GitHub Actions"),n(" 自动生成，本文就介绍这种方式。")],-1),d={href:"https://github.com/marketplace/actions/toc-generator",target:"_blank",rel:"noopener noreferrer"},u=l(`<p>使用配置其实非常简单，基本上阅读完官方介绍文档就可以上手使用了，这里说一两个需要注意的地方。</p><p>首先需要在将要生成目录的文件内，指定目录生成位置，e.g. <code>README.md</code>，在要生成的地方添加如下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- START doctoc --&gt;
&lt;!-- END doctoc --&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后添加 Actions 配置文件，e.g. <code>.github/workflows/toc.yml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">on</span><span class="token punctuation">:</span> push
<span class="token key atrule">name</span><span class="token punctuation">:</span> TOC Generator
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">generateTOC</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> TOC Generator
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> technote<span class="token punctuation">-</span>space/toc<span class="token punctuation">-</span>generator@v4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着需要调整下项目的 Actions 权限，在 GitHub 上点击<code>settings</code>--&gt; <code>actions</code> --&gt; <code>General</code> --&gt; <code>Workflow permissions</code> --&gt; 选择 <code>Read and write permissions</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/eryajf/tu/img/image_20220718_172340.png" alt="image_20220718_172340"></p><p>配置调整完成之后，就可以 push 项目看效果了，当然这里也可以通过 GitHub_Token 的方式认证，就不赘述了。</p><p>效果呈现如下：</p><p><img src="https://cdn.jsdelivr.net/gh/eryajf/tu/img/image_20220719_110310.png" alt="image_20220719_110310"></p>`,10),m=e("code",null,"配置列表：",-1),_={href:"https://github.com/marketplace/actions/toc-generator#options",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,"可根据自己的实际需求以及情况进行配置！",-1),k=e("h2",{id:"另外",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#另外","aria-hidden":"true"},"#"),n(" 另外")],-1),h=e("p",null,"后来在一个地方学到了一招，原来 GitHub 针对 Markdown 文件已经默认支持了目录的方式，并且还支持搜索，如下：",-1),v=e("p",null,[e("img",{src:"https://cdn.jsdelivr.net/gh/eryajf/tu/img/image_20220719_110613.png",alt:"image_20220719_110613"})],-1);function b(f,y){const s=o("ExternalLinkIcon");return c(),i("div",null,[p,e("p",null,[n("所用 Actions："),e("a",d,[n("TOC Generator"),a(s)])]),u,e("p",null,[m,e("a",_,[n("点我查看"),a(s)])]),g,k,h,v])}const A=t(r,[["render",b],["__file","01-Automatically-add-TOC-directories-for-README.html.vue"]]);export{A as default};
